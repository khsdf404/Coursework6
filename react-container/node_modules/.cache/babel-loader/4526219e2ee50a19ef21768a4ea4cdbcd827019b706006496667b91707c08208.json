{"ast":null,"code":"import { LocalDB } from './ApiLocal';\nconst baseURL = 'http://localhost:8080';\nclass DB {\n  static async GetReply(link) {\n    let obj = {};\n    let reply = await DB.Request(`${baseURL}/api/reply/${link}/`);\n    obj['answers'] = reply.answers;\n    let poll = await DB.Request(`${baseURL}/api/polls/public/${reply.pollLink}/`);\n    obj['questions'] = poll.questions;\n    return obj;\n  }\n  static async GetPoll(link) {\n    return await DB.Request(`${baseURL}/api/polls/public/${link}/`);\n  }\n  static async PostReply(obj) {\n    return await DB.Request(`${baseURL}/api/reply/`, 'POST', obj);\n  }\n  static async GetReplyList(link) {\n    // await DB.CheckToken();\n    return await DB.Request(`${baseURL}/api/reply/byParent/${link}/`, 'GET', null, LocalDB.GetToken());\n  }\n  static async CheckToken() {\n    let tokenObj = await DB.Request('/auth/token/', 'GET', null, LocalDB.GetToken());\n    if (tokenObj['token'] == null) {\n      window.location.replace('/');\n      return;\n    }\n    LocalDB.SetToken(tokenObj['token']);\n  }\n  static async Request(url, method = 'GET', bodyObj = null, token = null) {\n    let result = null;\n    let obj = {};\n    obj['method'] = method;\n    obj['headers'] = {};\n    obj['headers']['Content-type'] = 'application/json';\n    if (token) obj['headers']['Authorization'] = `Bearer ${token}`;\n    if (bodyObj) obj['body'] = JSON.stringify(bodyObj);\n    await fetch(url, obj).then(async response => {\n      console.log(response);\n      if (response.ok) await response.json().then(data => {\n        console.log(data);\n        result = data;\n      });else response.text().then(console.log);\n    });\n    return result;\n  }\n}\nexport { DB };","map":{"version":3,"names":["LocalDB","baseURL","DB","GetReply","link","obj","reply","Request","answers","poll","pollLink","questions","GetPoll","PostReply","GetReplyList","GetToken","CheckToken","tokenObj","window","location","replace","SetToken","url","method","bodyObj","token","result","JSON","stringify","fetch","then","response","console","log","ok","json","data","text"],"sources":["/home/khsdf/tmp/K3/src/reply/scripts/ApiDB.js"],"sourcesContent":["import { LocalDB } from './ApiLocal';\r\n\r\nconst baseURL = 'http://localhost:8080';\r\n\r\nclass DB {\r\n\r\n    static async GetReply(link) {\r\n        let obj = {};\r\n\r\n        let reply = await DB.Request(`${baseURL}/api/reply/${link}/`);\r\n        obj['answers'] = reply.answers;\r\n\r\n        let poll = await DB.Request(`${baseURL}/api/polls/public/${reply.pollLink}/`);\r\n        obj['questions'] = poll.questions;\r\n\r\n        return obj;\r\n    }\r\n\r\n    static async GetPoll(link) {\r\n        return await DB.Request(`${baseURL}/api/polls/public/${link}/`);\r\n    }\r\n\r\n    static async PostReply(obj) {\r\n        return await DB.Request(`${baseURL}/api/reply/`, 'POST', obj);\r\n    }\r\n\r\n    static async GetReplyList(link) {\r\n        // await DB.CheckToken();\r\n        return await DB.Request(`${baseURL}/api/reply/byParent/${link}/`, 'GET', null, LocalDB.GetToken())\r\n    }\r\n\r\n    \r\n\r\n    static async CheckToken() {\r\n        let tokenObj = await DB.Request('/auth/token/', 'GET', null, LocalDB.GetToken());\r\n        if (tokenObj['token'] == null) {\r\n            window.location.replace('/');\r\n            return;\r\n        }\r\n        LocalDB.SetToken(tokenObj['token']);\r\n    }\r\n    \r\n    static async Request(url, method = 'GET', bodyObj = null, token = null) {\r\n        \r\n        let result = null;\r\n        let obj = {};\r\n\r\n        obj['method'] = method;\r\n        \r\n        obj['headers'] = {};\r\n        obj['headers']['Content-type'] = 'application/json';\r\n        if (token) obj['headers']['Authorization'] = `Bearer ${token}`;\r\n            \r\n        if (bodyObj) obj['body'] = JSON.stringify(bodyObj);\r\n        \r\n        await fetch(url, obj).then(async (response) => {\r\n            console.log(response)\r\n            if (response.ok)\r\n                await response.json().then(data => {\r\n                    console.log(data);\r\n                    result = data;\r\n                })\r\n            else \r\n                response.text().then(console.log)\r\n        });\r\n\r\n        return result;\r\n    }\r\n} \r\n\r\nexport { DB };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}